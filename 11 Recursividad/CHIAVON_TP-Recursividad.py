# Ejercicios
# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario


def factorial(n):
    # Caso base: el factorial de 0 o 1 es 1
    if n == 0 or n == 1:    
        return 1
    else:
        # Llamada recursiva: n * factorial de (n - 1)
        return n * factorial(n - 1)  

# Funci√≥n para mostrar los factoriales desde 1 hasta n
def mostrar_factoriales_hasta(n):
    # Recorre todos los n√∫meros del 1 al n
    for i in range(1, n + 1):
        # Muestra el factorial de cada n√∫mero i
        print(f"El factorial de {i} es: {factorial(i)}")

# Solicitar al usuario un n√∫mero entero positivo
n = int(input("Ingrese un n√∫mero entero positivo: "))

# Mostrar los factoriales desde 1 hasta el n√∫mero ingresado
mostrar_factoriales_hasta(n)



# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

# Funci√≥n recursiva para calcular el n-√©simo t√©rmino de la serie de Fibonacci
def fibonacci(n):
    # Caso base: el t√©rmino 0 es 0
    if n <= 0:
        return 0
    # Caso base: el t√©rmino 1 es 1
    elif n == 1:
        return 1
    else:
        # Llamada recursiva: suma de los dos t√©rminos anteriores
        return fibonacci(n - 1) + fibonacci(n - 2)

# Funci√≥n para mostrar todos los elementos de la serie de Fibonacci hasta n
def mostrar_serie_fibonacci_hasta(n):
    # Recorre desde 0 hasta n (inclusive)
    for i in range(n + 1):
        # Muestra el i-√©simo elemento de la serie
        print(f"El elemento {i} de la serie de Fibonacci es: {fibonacci(i)}")

# Solicitar al usuario un n√∫mero entero positivo
n = int(input("Ingrese un n√∫mero entero positivo: "))   


#mostrar el valor de la serie de Fibonacci en la posici√≥n indicada
print(f"El valor de la serie de Fibonacci en la posici√≥n {n} es: {fibonacci(n)}")

# Mostrar la serie de Fibonacci desde 0 hasta el n√∫mero ingresado
mostrar_serie_fibonacci_hasta(n)




# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ a la m = ùëõ ‚àó ùëõ a la (ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exponente):
    # Caso base: cualquier n√∫mero elevado a 0 es 1
    if exponente == 0:
        return 1
    else:
        # Multiplicar la base por s√≠ misma (exponente - 1) veces
        return base * potencia(base, exponente - 1)
    
# Solicitar al usuario la base y el exponente
base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))

# Calcular la potencia y mostrar el resultado
resultado = potencia(base, exponente)
print(f"{base} elevado a {exponente} es: {resultado}")


# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento:
#     1. Dividir el n√∫mero por 2.
#     2. Guardar el resto (0 o 1).
#     3. Repetir el proceso con el cociente hasta que llegue a 0.
#     4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.

#     üß†Ejemplo:
#     Convertir el n√∫mero 10 a binario:
#     10 √∑ 2 = 5 resto: 0 
#     5 √∑ 2 = 2 resto: 1 
#     2 √∑ 2 = 1 resto: 0 
#     1 √∑ 2 = 0 resto: 1 
#     Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010".

def decimal_a_binario(n):
    # Caso base: cuando n es 0, devuelve una cadena vac√≠a (termina la recursi√≥n)
    if n == 0:
        return ""
    else:
        # Llamada recursiva: divide n entre 2 (parte entera)
        # Luego concatena el resto (n % 2) convertido a cadena
        return decimal_a_binario(n // 2) + str(n % 2)

    
# Solicitar al usuario un n√∫mero entero positivo
n = int(input("Ingrese un n√∫mero entero positivo: "))

# Convertir el n√∫mero a binario y mostrar el resultado
binario = decimal_a_binario(n)
print(f"El n√∫mero {n} en binario es: {binario}")    




# 5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
#  Requisitos:
# La soluci√≥n debe ser recursiva.
# No se debe usar [::-1] ni la funci√≥n reversed().



def es_palindromo(palabra):
    # Creamos una nueva cadena vac√≠a para guardar la palabra recortada
    nueva_palabra = ""
    
    # √çndice del primer caracter
    primera = 0
    # √çndice del √∫ltimo caracter
    ultima = len(palabra) - 1

    # Caso base: si la palabra tiene 0 o 1 letras, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    else:
        # Comparamos el primer y √∫ltimo car√°cter
        if palabra[primera] == palabra[ultima]:
            # Si son iguales, construimos una nueva palabra sin los extremos
            for i in range(1, len(palabra) - 1):
                nueva_palabra += palabra[i]
            # Llamamos recursivamente con la palabra recortada
            return es_palindromo(nueva_palabra)
        else:
            # Si los caracteres no son iguales, no es pal√≠ndromo
            return False


# Solicitar al usuario una palabra
palabra = input("Ingrese una palabra sin espacios ni tildes: ")
# Verificar si la palabra es un pal√≠ndromo
print(es_palindromo(palabra)) 


# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#  Restricciones:
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
# Ejemplos:
# suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
# suma_digitos(9) ‚Üí 9
# suma_digitos(305) ‚Üí 8 (3 + 0 + 5)


def suma_digitos(n):
    # Caso base: si n es 0, la suma de los d√≠gitos es 0
    if n == 0:
        return 0
    else:
        # Sumar el √∫ltimo d√≠gito (n % 10) y llamar recursivamente con el resto del n√∫mero (n // 10)
        return (n % 10) + suma_digitos(n // 10) 

# Solicitar al usuario un n√∫mero entero positivo
n = int(input("Ingrese un n√∫mero entero positivo: "))
# Calcular la suma de los d√≠gitos
print(f"La suma de los d√≠gitos de {n} es: {suma_digitos(n)}")


# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.
#  Ejemplos:
# contar_bloques(1) ‚Üí 1 (1)
# contar_bloques(2) ‚Üí 3 (2 + 1)
# contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)

def contar_bloques(n):
    # Caso base: si n es 1, no hay mas bloques despues
    if n == 1:
        return 1
    else:
        # Sumar el n√∫mero de bloques en el nivel actual (n) y llamar recursivamente con el nivel anterior (n - 1)
        return n + contar_bloques(n - 1)
    
# Solicitar al usuario el n√∫mero de bloques en el nivel m√°s bajo
n = int(input("Ingrese el n√∫mero de bloques en el nivel m√°s bajo: "))
# Calcular el total de bloques  
print(f"El total de bloques para construir la pir√°mide es: {contar_bloques(n)}")


# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
#  Ejemplos:
# contar_digito(12233421, 2) ‚Üí 3 
# contar_digito(5555, 5) ‚Üí 4 
# contar_digito(123456, 7) ‚Üí 0  """

def contar_digito(numero, digito):
    # Caso base: si el n√∫mero es 0, no hay m√°s d√≠gitos para contar
    if numero == 0:
        return 0
    else:
        # Verificar si el √∫ltimo d√≠gito del n√∫mero es igual al d√≠gito buscado
        if numero % 10 == digito:
            # Sumar 1 y llamar recursivamente con el resto del n√∫mero (n√∫mero // 10)
            return 1 + contar_digito(numero // 10, digito)
        else:
            # Llamar recursivamente sin sumar, solo con el resto del n√∫mero
            return contar_digito(numero // 10, digito)
        
# Solicitar al usuario el n√∫mero y el d√≠gito a contar
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese el d√≠gito a contar: "))
# Calcular la cantidad de veces que aparece el d√≠gito
print(f"El d√≠gito {digito} aparece {contar_digito(numero, digito)} veces en el n√∫mero {numero}")